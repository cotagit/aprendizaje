{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\ncreateApp(App).mount('#app');\n/*\nSe importa el método createApp y para crear la aplicación se ejecuta el método createApp(App). \nSe importa el código principal de la aplicación, localizado en el archivo App.vue.\nPara incluirla o montarla y que se renderice en un elemento HTML de nuestra página, \nque en este caso es el div #app, se usa el método mount('#app')\nEn el archivo App.vue se importan los componentes reutilizables que conforman la aplicación: HelloWord.vue y TablaPersonas.vue, etc\n\n  Los archivos Vue se dividen en tres secciones: \n\n  1- la sección template,  el código HTML de la aplicación. (en realidad, código vue) \n  2 - la sección script,  el código JavaScript. \n  3 - la sección style, el código CSS\n  \n  Las 3 secciones se incluyen en un mismo módulo, para que sea reutilizable.\n  \n  Se incluye la sentencia export default para que se pueda importar en otros módulos \n\n  <script>\n\n  MODULOS IMPORTADOS. SE PUEDE USAR EL CARÁCTER @ PARA REFERENCIAR AL DIRECTORIO src\n  import ArchivoImportado1 from './components/ArchivoImportado1.vue'  \n  import ArchivoImportado2 from '@/components/ArchivoImportado2.vue'  \n  import ArchivoImportadoN from '@/components/ArchivoImportadoN.vue' \n\n  export default {\n\n    NOMBRE CON QUE SE MENCIONARÁ ESTE MÓDULO EN OTROS EN LOS QUE SE IMPORTE\n    name: 'nombre-del-modulo', \n\n    EL OBJETO components REFERENCIA LOS MODULOS IMPORTADOS\n    components: {\n        ArchivoImportado1, \n        ArchivoImportado2,\n        ArchivoImportadoN\n    },\n\n    EL MÉTODO data EQUIVALE AL ESTADO DE LOS COMPONENETES EN React\n    INICIALIZA LOS VALORES DE LOS ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n    ESTOS VALORES SE ACTUALIZAN EN EL CICLO DE VIDA DE ESTE DOM\n    data() {  \n        return {\n            personas: [...],\n            otro: 'lolo'\n        }\n    },\n\n    EL OBJETO props CONTIENE LAS PROPIEDADES QUE VA A RECIBIR EL COMPONENTE\n    EN PARES nombre:tipo\n    props: {\n        personas: Array,\n        otro: String\n    },\n\n    LOS METODOS SON\n        FUNCIONES QUE RESPONDEN A LISTENERS ASOCIADOS A ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n        FUNCIONES\n      methods: {\n        agregarPersona(persona) {\n          this.personas = [...this.personas, persona];\n        }\n      },\n    }\n*/","map":{"version":3,"names":["createApp","App","mount"],"sources":["C:/Users/glo/Documents/UROLOGIA/00-LAB/vue/aprendizaje/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n/*\nSe importa el método createApp y para crear la aplicación se ejecuta el método createApp(App). \nSe importa el código principal de la aplicación, localizado en el archivo App.vue.\nPara incluirla o montarla y que se renderice en un elemento HTML de nuestra página, \nque en este caso es el div #app, se usa el método mount('#app')\nEn el archivo App.vue se importan los componentes reutilizables que conforman la aplicación: HelloWord.vue y TablaPersonas.vue, etc\n\n  Los archivos Vue se dividen en tres secciones: \n\n  1- la sección template,  el código HTML de la aplicación. (en realidad, código vue) \n  2 - la sección script,  el código JavaScript. \n  3 - la sección style, el código CSS\n  \n  Las 3 secciones se incluyen en un mismo módulo, para que sea reutilizable.\n  \n  Se incluye la sentencia export default para que se pueda importar en otros módulos \n\n  <script>\n\n  MODULOS IMPORTADOS. SE PUEDE USAR EL CARÁCTER @ PARA REFERENCIAR AL DIRECTORIO src\n  import ArchivoImportado1 from './components/ArchivoImportado1.vue'  \n  import ArchivoImportado2 from '@/components/ArchivoImportado2.vue'  \n  import ArchivoImportadoN from '@/components/ArchivoImportadoN.vue' \n\n  export default {\n\n    NOMBRE CON QUE SE MENCIONARÁ ESTE MÓDULO EN OTROS EN LOS QUE SE IMPORTE\n    name: 'nombre-del-modulo', \n\n    EL OBJETO components REFERENCIA LOS MODULOS IMPORTADOS\n    components: {\n        ArchivoImportado1, \n        ArchivoImportado2,\n        ArchivoImportadoN\n    },\n\n    EL MÉTODO data EQUIVALE AL ESTADO DE LOS COMPONENETES EN React\n    INICIALIZA LOS VALORES DE LOS ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n    ESTOS VALORES SE ACTUALIZAN EN EL CICLO DE VIDA DE ESTE DOM\n    data() {  \n        return {\n            personas: [...],\n            otro: 'lolo'\n        }\n    },\n\n    EL OBJETO props CONTIENE LAS PROPIEDADES QUE VA A RECIBIR EL COMPONENTE\n    EN PARES nombre:tipo\n    props: {\n        personas: Array,\n        otro: String\n    },\n\n    LOS METODOS SON\n        FUNCIONES QUE RESPONDEN A LISTENERS ASOCIADOS A ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n        FUNCIONES\n      methods: {\n        agregarPersona(persona) {\n          this.personas = [...this.personas, persona];\n        }\n      },\n    }\n*/"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAE3BD,SAAS,CAACC,GAAG,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}