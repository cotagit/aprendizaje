{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\ncreateApp(App).mount('#app');\n/*\nSe importa el método createApp y para crear la aplicación se ejecuta el método createApp(App). \nSe importa el código principal de la aplicación, localizado en el archivo App.vue.\nPara incluirla o montarla y que se renderice en un elemento HTML de la página, \nque en este caso es el div #app, se usa el método mount('#app')\n\nEn el archivo App.vue se importan los componentes reutilizables que conforman la aplicación: HelloWord.vue y TablaPersonas.vue, etc\n\n  Los archivos Vue se dividen en tres secciones: \n\n  1- la sección template,  el código HTML de la aplicación. (en realidad, código vue) \n  2 - la sección script,  el código JavaScript. \n  3 - la sección style, el código CSS\n  \n  Las 3 secciones se incluyen en un mismo módulo, para que sea reutilizable en sí mismo, sin necesidad de componer varios archivos\n  \n  Se incluye la sentencia export default en la sección script para que se pueda importar en otros módulos \n\n  -------------------------------------------------------------------------- LA SECCION TEMPLATE\n  \n  AGREGAR UN EVENT LISTENER A UN FORMULARIO\n\n  <form @submit.prevent=\"nombreFuncion\">\n  \n  onSubmit se ejecuta al hacer clic en el botón de envío. \n  Para ello usaremos al atributo @submit, que es la forma corta del atributo v-on:submit, siendo ambos equivalentes.\n  Para evitar que se refresque la página al enviar el formulario el evento @submit cuenta con el modificador prevent, \n  que es equivalente a ejecutar el método event.preventDefault() en el interior de la función asociada al evento submit.\n\n  La función que escucha el evento (nombreFuncion) se incluye en la sección script del módulo, en el objeto \"methods\".\n  Esta función de escucha contiene el método $emit \n  que envía el nombre del evento que definamos y los datos que deseemos al componente en el que se ha renderizado el componente actual.\n  \n  Envía el evento add-persona y el objeto this.persona a App.vue\n    \n  enviarFormulario() {\n    this.$emit('add-persona', this.persona);\n  },    \n\n  VALORES DE LOS CAMPOS DEL FORMULARIO\n\n  el atributo v-model vincula el valor de los campos con sus respectivas variables de estado, definidas en el data \n\n  <label>Nombre</label>\n  <input v-model=\"persona.nombre\" type=\"text\" />\n\n  CONTENIDO DE UNA TABLA POR ITERACION\n\n  el atributo v-for permite recorrer los datos de una propiedad, por ej. la propiedad personas (un array)\n\n  <tbody>\n    <tr v-for=\"persona in personas\" :key=\"persona.id\">\n      <td>{{ persona.nombre}}</td>\n      <td>{{ persona.apellido }}</td>\n      <td>{{ persona.email}}</td>\n    </tr>\n  </tbody>\n\n  -------------------------------------------------------------------------- LA SECCION SCRIPT\n\n  <script>\n\n  MODULOS IMPORTADOS. SE PUEDE USAR EL CARÁCTER @ PARA REFERENCIAR AL DIRECTORIO src\n  LOS NOMBRES DE ARCHIVOS SE ESCRIBEN EN FORMATO PascalCase\n  import ArchivoImportado1 from './components/ArchivoImportado1.vue'  \n  import ArchivoImportado2 from '@/components/ArchivoImportado2.vue'  \n  import ArchivoImportadoN from '@/components/ArchivoImportadoN.vue' \n\n  export default {\n\n    NOMBRE CON QUE SE MENCIONARÁ ESTE MÓDULO EN OTROS EN LOS QUE SE IMPORTE\n    EL NOMBRE DEL MODULO SE ESCRIBE EN FORMATO kebab-case\n\n    name: 'nombre-del-modulo', \n\n    EL OBJETO components REFERENCIA LOS MODULOS IMPORTADOS\n\n    components: {\n        ArchivoImportado1, \n        ArchivoImportado2,\n        ArchivoImportadoN\n    },\n\n    EL MÉTODO data EQUIVALE AL ESTADO DE LOS COMPONENETES EN React\n    INICIALIZA LOS VALORES DE LOS ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n    ESTOS VALORES SE ACTUALIZAN EN EL CICLO DE VIDA DE ESTE DOM\n\n    data() {  \n        return {\n            personas: [...],\n            otro: 'lolo'\n        }\n    },\n\n    EL OBJETO props CONTIENE LAS PROPIEDADES QUE VA A RECIBIR EL COMPONENTE\n    EN PARES nombre:tipo\n\n    props: {\n        personas: Array,\n        otro: String\n    },\n\n    LOS LOS NOMBRES DE LOS METODOS Y VARIABLES SE ESCRIBEN EN FORMATO camelCase\n\n    methods: {\n\n      FUNCIÓN QUE RESPONDE AL LISTENER EN EL FORMULARIO (<form @submit.prevent=\"enviarFormulario\">)\n      enviarFormulario() {\n          this.$emit('add-persona', this.persona);\n      },\n      FUNCIÓN QUE RESPONDE AL LISTENER EN EL CONTENEDOR DEL FORMULARIO <formulario-persona @add-persona=\"agregarPersona\" />)\n      agregarPersona(persona) {\n        this.personas = [...this.personas, persona];\n      }\n      \n\n    },\n\n    }\n*/","map":{"version":3,"names":["createApp","App","mount"],"sources":["C:/Users/glo/Documents/UROLOGIA/00-LAB/vue/aprendizaje/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n/*\nSe importa el método createApp y para crear la aplicación se ejecuta el método createApp(App). \nSe importa el código principal de la aplicación, localizado en el archivo App.vue.\nPara incluirla o montarla y que se renderice en un elemento HTML de la página, \nque en este caso es el div #app, se usa el método mount('#app')\n\nEn el archivo App.vue se importan los componentes reutilizables que conforman la aplicación: HelloWord.vue y TablaPersonas.vue, etc\n\n  Los archivos Vue se dividen en tres secciones: \n\n  1- la sección template,  el código HTML de la aplicación. (en realidad, código vue) \n  2 - la sección script,  el código JavaScript. \n  3 - la sección style, el código CSS\n  \n  Las 3 secciones se incluyen en un mismo módulo, para que sea reutilizable en sí mismo, sin necesidad de componer varios archivos\n  \n  Se incluye la sentencia export default en la sección script para que se pueda importar en otros módulos \n\n  -------------------------------------------------------------------------- LA SECCION TEMPLATE\n  \n  AGREGAR UN EVENT LISTENER A UN FORMULARIO\n\n  <form @submit.prevent=\"nombreFuncion\">\n  \n  onSubmit se ejecuta al hacer clic en el botón de envío. \n  Para ello usaremos al atributo @submit, que es la forma corta del atributo v-on:submit, siendo ambos equivalentes.\n  Para evitar que se refresque la página al enviar el formulario el evento @submit cuenta con el modificador prevent, \n  que es equivalente a ejecutar el método event.preventDefault() en el interior de la función asociada al evento submit.\n\n  La función que escucha el evento (nombreFuncion) se incluye en la sección script del módulo, en el objeto \"methods\".\n  Esta función de escucha contiene el método $emit \n  que envía el nombre del evento que definamos y los datos que deseemos al componente en el que se ha renderizado el componente actual.\n  \n  Envía el evento add-persona y el objeto this.persona a App.vue\n    \n  enviarFormulario() {\n    this.$emit('add-persona', this.persona);\n  },    \n\n  VALORES DE LOS CAMPOS DEL FORMULARIO\n\n  el atributo v-model vincula el valor de los campos con sus respectivas variables de estado, definidas en el data \n\n  <label>Nombre</label>\n  <input v-model=\"persona.nombre\" type=\"text\" />\n\n  CONTENIDO DE UNA TABLA POR ITERACION\n\n  el atributo v-for permite recorrer los datos de una propiedad, por ej. la propiedad personas (un array)\n\n  <tbody>\n    <tr v-for=\"persona in personas\" :key=\"persona.id\">\n      <td>{{ persona.nombre}}</td>\n      <td>{{ persona.apellido }}</td>\n      <td>{{ persona.email}}</td>\n    </tr>\n  </tbody>\n\n  -------------------------------------------------------------------------- LA SECCION SCRIPT\n\n  <script>\n\n  MODULOS IMPORTADOS. SE PUEDE USAR EL CARÁCTER @ PARA REFERENCIAR AL DIRECTORIO src\n  LOS NOMBRES DE ARCHIVOS SE ESCRIBEN EN FORMATO PascalCase\n  import ArchivoImportado1 from './components/ArchivoImportado1.vue'  \n  import ArchivoImportado2 from '@/components/ArchivoImportado2.vue'  \n  import ArchivoImportadoN from '@/components/ArchivoImportadoN.vue' \n\n  export default {\n\n    NOMBRE CON QUE SE MENCIONARÁ ESTE MÓDULO EN OTROS EN LOS QUE SE IMPORTE\n    EL NOMBRE DEL MODULO SE ESCRIBE EN FORMATO kebab-case\n\n    name: 'nombre-del-modulo', \n\n    EL OBJETO components REFERENCIA LOS MODULOS IMPORTADOS\n\n    components: {\n        ArchivoImportado1, \n        ArchivoImportado2,\n        ArchivoImportadoN\n    },\n\n    EL MÉTODO data EQUIVALE AL ESTADO DE LOS COMPONENETES EN React\n    INICIALIZA LOS VALORES DE LOS ELEMENTOS DEL DOM MENCIONADOS EN LA SECCIÓN TEMPLATE\n    ESTOS VALORES SE ACTUALIZAN EN EL CICLO DE VIDA DE ESTE DOM\n\n    data() {  \n        return {\n            personas: [...],\n            otro: 'lolo'\n        }\n    },\n\n    EL OBJETO props CONTIENE LAS PROPIEDADES QUE VA A RECIBIR EL COMPONENTE\n    EN PARES nombre:tipo\n\n    props: {\n        personas: Array,\n        otro: String\n    },\n\n    LOS LOS NOMBRES DE LOS METODOS Y VARIABLES SE ESCRIBEN EN FORMATO camelCase\n\n    methods: {\n\n      FUNCIÓN QUE RESPONDE AL LISTENER EN EL FORMULARIO (<form @submit.prevent=\"enviarFormulario\">)\n      enviarFormulario() {\n          this.$emit('add-persona', this.persona);\n      },\n      FUNCIÓN QUE RESPONDE AL LISTENER EN EL CONTENEDOR DEL FORMULARIO <formulario-persona @add-persona=\"agregarPersona\" />)\n      agregarPersona(persona) {\n        this.personas = [...this.personas, persona];\n      }\n      \n\n    },\n\n    }\n*/"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAE3BD,SAAS,CAACC,GAAG,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}